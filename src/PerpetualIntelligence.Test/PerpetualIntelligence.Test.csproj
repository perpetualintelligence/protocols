<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup Label="Globals">
        <SccProjectName>SAK</SccProjectName>
        <SccProvider>SAK</SccProvider>
        <SccAuxPath>SAK</SccAuxPath>
        <SccLocalPath>SAK</SccLocalPath>
        <Configurations>Debug;Release</Configurations>
    </PropertyGroup>

    <Import Project="..\..\build\props\PackageApache.props" />

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <PropertyGroup Label="PiPackageProps">
        <Product>protocols</Product>
        <Description>The cross platform test components shared across application stack.</Description>
        <PackageTags>infrastructure test</PackageTags>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.AspNetCore.Mvc.Core" Version="2.2.5" />
        <PackageReference Include="Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer" Version="5.0.0" />
        <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="6.0.0" />
        <PackageReference Include="MSTest.TestFramework" Version="2.2.8" />
    </ItemGroup>

    <!--
        CAUTION: DO NOT EDIT UNLESS YOU ARE KNOWLEDGEABLE ABOUT THE PERPETUAL INTELLIGENCE'S AZURE AND GITHUB DEVOPS INTEGRATION.

        Purpose: Runtime reference resolution (Project references Vs Nuget Packages)

        Design: All the packages in a pipeline will have same configuration and same sematic versions.

        Pipeline: protocols

        Cadence:
            PI_LIBRARY_CADENCE: Azure pipeline library environment variable that determines the release cadence.
            Undefined/Local: Project References in both Debug and Release mode.
            preview: Preview Packages
            rc: Release Candidate Packages
            release: Released Packages

        Pipeline Package Versioning:
            PI_LIBRARY_PACKAGEVERSION: Azure pipeline environment variable that determines package version.
        
        Important:
            These environment variables are set in the Azure DevOps and will not be available on the local machine unless you define
            them explicitly defined as system environment variables.

        Magic:
            The Azure pipeline takes care of creating a correct PI_LIBRARY_PACKAGEVERSION based on PI_LIBRARY_CADENCE.
    -->
    <Choose>
        <!-- Undefined or local environment use Project references-->
        <When Condition="'$(PI_LIBRARY_CADENCE)'=='' Or '$(PI_LIBRARY_CADENCE)'=='local'">
            <ItemGroup>
                <ProjectReference Include="..\PerpetualIntelligence.Shared\PerpetualIntelligence.Shared.csproj" />
            </ItemGroup>
        </When>

        <!-- cross repo environment -->
        <When Condition="'$(PI_LIBRARY_CADENCE)'=='cross'">
            <ItemGroup>
                <!-- Same repo project references -->
                <ProjectReference Include="..\PerpetualIntelligence.Shared\PerpetualIntelligence.Shared.csproj" />
            </ItemGroup>
        </When>

        <!--Honor the cadence and use Nuget references-->
        <Otherwise>
            <ItemGroup>
                <PackageReference Include="PerpetualIntelligence.Shared" Version="$(PI_LIBRARY_PACKAGEVERSION)" />
            </ItemGroup>
        </Otherwise>
    </Choose>

</Project>
